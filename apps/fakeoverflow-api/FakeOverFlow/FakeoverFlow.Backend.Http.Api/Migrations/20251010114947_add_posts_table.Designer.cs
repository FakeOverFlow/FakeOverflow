// <auto-generated />
using System;
using FakeoverFlow.Backend.Http.Api;
using FakeoverFlow.Backend.Http.Api.Models.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace FakeoverFlow.Backend.Http.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251010114947_add_posts_table")]
    partial class add_posts_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "content_type", new[] { "answers", "questions" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_roles", new[] { "admin", "moderator", "user" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FakeoverFlow.Backend.Http.Api.Models.Accounts.RefreshTokens", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() + INTERVAL '10 days'");

                    b.Property<string>("JTI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RevokedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("JTI", "UserId")
                        .IsUnique();

                    b.HasIndex("Id", "UserId", "ExpiresOn");

                    b.ToTable("RefreshTokens", "public");
                });

            modelBuilder.Entity("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("text");

                    b.Property<UserRoles>("Role")
                        .HasColumnType("user_roles");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<NpgsqlTsVector>("VectorText")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Email", "Username" });

                    b.Property<DateTimeOffset?>("VerifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("IX_UserAccount_CreatedOn");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_UserAccount_IsDeleted_ActiveOnly")
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("UpdatedOn")
                        .HasDatabaseName("IX_UserAccount_UpdatedOn");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("VectorText");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("VectorText"), "GIN");

                    b.ToTable("UserAccounts", "public");
                });

            modelBuilder.Entity("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccountVerification", b =>
                {
                    b.Property<string>("VerificationToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("VerificationToken");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAccountVerifications", "public");
                });

            modelBuilder.Entity("FakeoverFlow.Backend.Http.Api.Models.Posts.PostContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<ContentType>("ContentType")
                        .HasColumnType("content_type");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<NpgsqlTsVector>("VectorText")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Content" });

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VectorText");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("VectorText"), "GIN");

                    b.HasIndex("PostId", "ContentType")
                        .IsUnique()
                        .HasFilter("\"ContentType\" = 'Questions'");

                    b.ToTable("PostContent", "public");
                });

            modelBuilder.Entity("FakeoverFlow.Backend.Http.Api.Models.Posts.Posts", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<NpgsqlTsVector>("VectorText")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title" });

                    b.Property<long>("Views")
                        .HasColumnType("bigint");

                    b.Property<long>("Votes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VectorText");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("VectorText"), "GIN");

                    b.ToTable("Posts", "public");
                });

            modelBuilder.Entity("FakeoverFlow.Backend.Http.Api.Models.Accounts.RefreshTokens", b =>
                {
                    b.HasOne("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccount", "Account")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccount", b =>
                {
                    b.OwnsOne("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccountSettings", "Settings", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uuid");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccounts", "public");

                            b1.ToJson("Settings");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccountVerification", b =>
                {
                    b.HasOne("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccount", "Account")
                        .WithOne()
                        .HasForeignKey("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccountVerification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FakeoverFlow.Backend.Http.Api.Models.Posts.PostContent", b =>
                {
                    b.HasOne("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccount", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FakeoverFlow.Backend.Http.Api.Models.Posts.Posts", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccount", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByAccount");

                    b.Navigation("Post");

                    b.Navigation("UpdatedByAccount");
                });

            modelBuilder.Entity("FakeoverFlow.Backend.Http.Api.Models.Posts.Posts", b =>
                {
                    b.HasOne("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccount", "CreatedByAccount")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FakeoverFlow.Backend.Http.Api.Models.Accounts.UserAccount", "UpdatedByAccount")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByAccount");

                    b.Navigation("UpdatedByAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
